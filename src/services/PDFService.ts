
import { PDFDocument, StandardFonts } from 'pdf-lib';

// Types for PDF generation
interface FieldMapping {
  documentId: string;
  fieldId: string;
  pdfFieldName: string;
}

interface PDFTemplate {
  id: string;
  name: string;
  description: string;
  file: ArrayBuffer;
  fieldMappings: FieldMapping[];
}

export class PDFService {
  private templates: Map<string, PDFTemplate> = new Map();
  
  // Add a template to the service
  async addTemplate(template: PDFTemplate): Promise<void> {
    this.templates.set(template.id, template);
  }
  
  // Get available templates
  getTemplates(): PDFTemplate[] {
    return Array.from(this.templates.values());
  }
  
  // Get a specific template
  getTemplate(id: string): PDFTemplate | undefined {
    return this.templates.get(id);
  }
  
  // Fill a PDF form with data
  async fillForm(templateId: string, data: Record<string, string>): Promise<ArrayBuffer> {
    const template = this.templates.get(templateId);
    if (!template) {
      throw new Error(`Template ${templateId} not found`);
    }
    
    try {
      // Load the PDF document
      const pdfDoc = await PDFDocument.load(template.file);
      const form = pdfDoc.getForm();
      
      // Apply data to fields using the field mappings
      for (const mapping of template.fieldMappings) {
        const value = data[mapping.fieldId];
        if (value) {
          try {
            const field = form.getTextField(mapping.pdfFieldName);
            field.setText(value);
          } catch (e) {
            console.warn(`Failed to set field ${mapping.pdfFieldName}:`, e);
          }
        }
      }
      
      // Flatten the form (optional - makes fields non-editable)
      form.flatten();
      
      // Save the PDF
      return await pdfDoc.save();
    } catch (error) {
      console.error('Error filling PDF form:', error);
      throw new Error('Failed to fill PDF form');
    }
  }
  
  // Generate a simple PDF with data if no template is available
  async generateSimplePDF(title: string, data: Record<string, string>): Promise<ArrayBuffer> {
    try {
      const pdfDoc = await PDFDocument.create();
      const page = pdfDoc.addPage();
      const { width, height } = page.getSize();
      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
      const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
      
      // Set title
      page.drawText(title, {
        x: 50,
        y: height - 50,
        size: 20,
        font: boldFont
      });
      
      // Add data as key-value pairs
      let yPosition = height - 100;
      Object.entries(data).forEach(([key, value]) => {
        page.drawText(`${key}:`, {
          x: 50,
          y: yPosition,
          size: 12,
          font: boldFont
        });
        
        page.drawText(value || '--', {
          x: 200,
          y: yPosition,
          size: 12,
          font: font
        });
        
        yPosition -= 25;
      });
      
      // Add footer
      page.drawText('Generated by CarDealPro', {
        x: 50,
        y: 40,
        size: 10,
        font: font
      });
      
      // Save the PDF
      return await pdfDoc.save();
    } catch (error) {
      console.error('Error generating simple PDF:', error);
      throw new Error('Failed to generate PDF');
    }
  }
}

// Create and export a singleton instance
export const pdfService = new PDFService();
